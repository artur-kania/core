{"version":3,"file":"select.js","sourceRoot":"","sources":["../../../src/operator/select.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AACxC,OAAO,EAAE,oBAAoB,EAAE,MAAM,oCAAoC,CAAC;AAC1E,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAO7C,MAAM,iBAAuB,WAAgB;IAAE,eAAkB;SAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;QAAlB,8BAAkB;;IAC/D,IAAI,OAAsB,CAAC;IAE3B,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;QACpC,OAAO,GAAG,KAAK,CAAC,IAAI,OAAV,KAAK,GAAM,IAAI,EAAE,WAAW,SAAK,KAAK,EAAC,CAAC;KACnD;IACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,UAAU,CAAC,CAAC,CAAC;QAC3C,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;KACvC;IACD,IAAI,CAAC,CAAC;QACJ,MAAM,IAAI,SAAS,CAAC,qBAAoB,OAAO,WAAW,yBAAuB;cAC7E,kCAAkC,CAAC,CAAC;KACzC;IAED,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;CAC3C","sourcesContent":["import { pluck } from 'rxjs/operator/pluck';\nimport { map } from 'rxjs/operator/map';\nimport { distinctUntilChanged } from 'rxjs/operator/distinctUntilChanged';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface SelectSignature<T> {\n  <R>(...paths: string[]): Observable<R>;\n  <R>(mapFn: (state: T) => R): Observable<R>;\n}\n\nexport function select<T, R>(pathOrMapFn: any, ...paths: string[]): Observable<R> {\n  let mapped$: Observable<R>;\n\n  if (typeof pathOrMapFn === 'string') {\n    mapped$ = pluck.call(this, pathOrMapFn, ...paths);\n  }\n  else if (typeof pathOrMapFn === 'function') {\n    mapped$ = map.call(this, pathOrMapFn);\n  }\n  else {\n    throw new TypeError(`Unexpected type ${ typeof pathOrMapFn } in select operator,`\n      + ` expected 'string' or 'function'`);\n  }\n\n  return distinctUntilChanged.call(mapped$);\n}"]}